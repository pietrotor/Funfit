scalar Date
scalar Time
scalar ObjectId
enum StatusEnum {
  OK
  ERROR
}

type Query {
  login(loginInput: LoginInput!): LoginResponse
  currentUser: UserResponse
  getRoles(paginationInput: PaginationInput!): RolesResponse
  getUsers(paginationInput: PaginationInput!): UsersResponse
  getUserById(id: ObjectId!): UserResponse
  getProducts(paginationInput: PaginationInput!): ProductsResponse
  getProductById(id: ObjectId!): ProductResponse
  getWarehouseById(id: ObjectId!): WarehouseResponse
  getWarehouses(paginationInput: PaginationInput!): WarehousesResponse
  getConfiguration: ConfigurationResponse
}
type Mutation {
  # ================= CONFIGURATION ====================================
  updateConfiguration(
    updateConfigurationInput: UpdateConfigurationInput!
  ): ConfigurationResponse
  # ================= USERS ============================================
  createUser(userInput: UserInput!): UserResponse
  updateUser(
    updateUserInput: UpdateUserInput!
    deleteInput: Boolean = false
  ): UserResponse
  # ================= PRODUCT ==========================================
  createProduct(createProductInput: CreateProductInput!): ProductResponse
  updateProduct(updateProductInput: UpdateProductInput!): ProductResponse
  deleteProduct(id: ObjectId!): ProductResponse
  # ================= WAREHOUSES =======================================
  createWarehouse(
    createWarehouseInput: CreateWarehouseInput!
  ): WarehouseResponse
  updateWarehouse(
    updateWarehouseInput: UpdateWarehouseInput!
  ): WarehouseResponse
  deleteWarehouse(id: ObjectId!): WarehouseResponse
}
# TYPE ENTITIES ------------------------------------------------------------------------------------------------------------------------------------
type MeasurementUnits {
  name: String!
  shortName: String!
}
type Configuration {
  id: ObjectId!
  businessName: String!
  nit: String
  phone: String!
  email: String!
  web: String
  address: String!
  direction: String!
  s3BucketUrl: String
  measurementUnits: [MeasurementUnits!]!
}
type Role {
  id: ObjectId!
  name: String!
  code: String!
  status: Boolean!
}
type User {
  id: ObjectId!
  name: String!
  lastName: String!
  email: String!
  phone: String!
  lastLogin: Date
  status: Boolean!
  createdBy: ObjectId
  roleId: ObjectId!
  # resolvers
  roleInfo: Role
}
type Product {
  id: ObjectId!
  name: String!
  # TODO: Change to pricelist
  suggetedPrice: Float!
  code: String!
  description: String!
  cost: Float
  image: String
  warehouses: [ObjectId!]!
}
type Warehouse {
  id: ObjectId!
  name: String!
  description: String!
  address: String!
}
# RESPONSES -----------------------------------------------------------------------------------------------------------------------------------------
interface ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
}
type ErrorInput {
  message: String!
  field: String
}
type Response implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
}
type ConfigurationResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Configuration
}
type LoginResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  token: String
}
type RolesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Role]
}
type UsersResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [User!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type UserResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: User
}
type ProductsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Product!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type ProductResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Product
}
type WarehouseResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Warehouse
}
type WarehousesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Warehouse!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
# INPUTS -----------------------------------------------------------------------------------------------------------------------------------------
input UpdateMeasurementUnitsInput {
  name: String!
  shortName: String!
}
input UpdateConfigurationInput {
  id: ObjectId!
  businessName: String
  nit: String
  phone: String
  email: String
  web: String
  address: String
  direction: String
  s3BucketUrl: String
  measurementUnits: [UpdateMeasurementUnitsInput!]
}
input LoginInput {
  email: String!
  password: String!
}
input PaginationInput {
  rows: Int
  page: Int
  filter: String
}
input UserInput {
  name: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  roleId: ObjectId!
}
input UpdateUserInput {
  id: ObjectId!
  name: String
  lastName: String
  email: String
  password: String
  phone: String
  roleId: ObjectId
  status: Boolean
}
input CreateProductInput {
  name: String!
  code: String!
  # TODO: Change to pricelist
  suggetedPrice: Float!
  description: String!
  cost: Float
  image: String
}
input UpdateProductInput {
  id: ObjectId!
  name: String
  code: String
  # TODO: Change to PriceList
  suggetedPrice: Float
  description: String
  cost: Float
  image: String
}
input CreateWarehouseInput {
  name: String!
  description: String!
  address: String!
}
input UpdateWarehouseInput {
  id: ObjectId!
  name: String
  description: String
  address: String
}
