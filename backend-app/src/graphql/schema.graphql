scalar Date
scalar Time
scalar ObjectId
scalar Upload

enum StatusEnum {
  OK
  ERROR
}
enum RoleTypeEnum {
  ADMINISTRATOR
  SALESMAN
}
enum StockMovementTypeEnum {
  INWARD
  OUTWARD
  DISPOSE
}
enum TurnMovementTypeEnum {
  ADD
  WITHDRAW
  ADJUST
}
enum PaymentMethodEnum {
  QR_TRANSFER
  CARD
  CASH
}
enum DeliveryMethodEnum {
  DELIVERY
  PICKUP
}
enum DistributorSalePaymentMethod {
  CREDIT
  MIXED
  CASH
}
enum OrderStatusEnum {
  PENDING
  ACEPTED
  SOLD
  DELIVERED
  REJECTED
}
type Query {
  # CONFIGURATION ====================================
  getConfiguration: ConfigurationResponse
  # USERS ============================================
  login(loginInput: LoginInput!): LoginResponse
  currentUser: UserResponse
  getRoles(paginationInput: PaginationInput!): RolesResponse
  getUsers(paginationInput: PaginationInput!): UsersResponse
  getUserById(id: ObjectId!): UserResponse
  # CATEGORIES ==========================================
  getCategories(paginationInput: PaginationInput!): CategoriesResponse
  getCategoryById(id: ObjectId!): CategoryResponse
  # PRODUCTS ==========================================
  getProducts(paginationInput: PaginationInput!): ProductsResponse
  getProductById(id: ObjectId!): ProductResponse
  getProductsOutOfWarehouse(
    paginationInput: PaginationInput!
    warehouseId: ObjectId!
  ): ProductsResponse
  getProductsOutOfPriceList(
    paginationInput: PaginationInput!
    priceListId: ObjectId!
  ): ProductsResponse
  # WAREHOUSES =======================================
  getWarehouses(paginationInput: PaginationInput!): WarehousesResponse
  getWarehouseById(id: ObjectId!): WarehouseResponse
  getWarehousesOfProduct(
    paginationInput: PaginationInput!
    productId: ObjectId!
  ): WarehousesResponse
  # STOCKS =======================================
  getStocksPaginated(paginationInput: PaginationInput!): StocksResponse
  getStockById(id: ObjectId!): StockResponse
  getProductStock(
    paginationInput: PaginationInput!
    productId: ObjectId!
    warehouseId: ObjectId
  ): StocksResponse
  getWarehouseStock(
    warehouseStockPaginationInput: WarehouseStockPaginationInput!
  ): StocksResponse
  getStockHistory(
    paginationInput: PaginationInput!
    stockId: ObjectId!
  ): StocksHistoryResponse
  getWarehouseHistory(
    paginationInput: PaginationInput!
    warehouseId: ObjectId!
  ): StocksHistoryResponse
  # BRANCHES ===============================
  getBranchesPaginated(paginationInput: PaginationInput!): BranchsResponse
  getBranchById(id: ObjectId!): BranchResponse
  getBranchProductsPaginated(
    paginationInput: PaginationInput!
    branchId: ObjectId!
    posMenu: Boolean
  ): BranchProductsResponse
  getBranchProductById(id: ObjectId!): BranchProductResponse
  # CASH ==================================
  getCashById(id: ObjectId!): CashResponse
  getCashTurnMovements(
    paginationInput: PaginationInput!
    turnId: ObjectId!
  ): CashTurnMovementsResponse
  # SALES =================================
  getSaleById(id: ObjectId!): SaleResponse
  getSalesPaginated(salesPaginationInput: SalesPaginationInput!): SalesResponse
  getSalesSummary(salesSummaryInput: SalesSummaryInput!): SalesSummaryResponse
  # ORDER ================================
  getOrderById(id: ObjectId!): OrderResponse
  getOrdersPaginated(
    orderPaginationInput: OrderPaginationInput!
  ): OrdersResponse
  # DISTRIBUTOR ================================
  getDistributorById(id: ObjectId!): DistributorResponse
  getDistributorsPaginated(
    paginationInput: PaginationInput!
  ): DistributorsResponse
  # PRICELISTS ================================
  getPriceListById(id: ObjectId!): PriceListResponse
  getPriceListsPaginated(paginationInput: PaginationInput!): PriceListsResponse
  # PRICE ================================
  getPriceById(id: ObjectId!): PriceResponse
  getPricesPaginated(
    pricePaginationInput: PricePaginationInput!
  ): PricesResponse
  # DISTRIBUTOR SALES ==========================
  getDistributorSaleProducts(
    warehouseId: ObjectId!
    priceListId: ObjectId!
  ): DistributorSaleProductsResponse
  getDistributorSalesPaginated(
    distributorSalePaginationInput: DistributorSalePaginationInput!
  ): DistributorSalesResponse
  getDistributorSale(id: ObjectId!): DistributorSaleResponse
  getDistributorsSalesSummary(
    distributorSalePaginationInput: DistributorSalePaginationInput!
  ): DistributorsSalesSummaryResponse
  # PAYMENTS ===================================
  getDistributorSalePayments(
    distibutorSaleId: ObjectId!
  ): DistributorSalePaymentsResponse
  # BUSINESS BALANCE ===================================
  getBusinessBalance(
    endDate: Date!
    initialDate: Date!
  ): BusinessBalanceResponse
  # ============================ ECOMMERCE ROUTES ================================
  getPublicProducts(branchId: ObjectId!): BranchProductsCategorizedResponse
  getPublicCategories: PublicCategoriesResponse
  getPublicCustomerById(id: ObjectId!): CustomerResponse
}
# **************************************************** MUTATIONS *******************************************************
type Mutation {
  # CONFIGURATION ====================================
  updateConfiguration(
    updateConfigurationInput: UpdateConfigurationInput!
  ): ConfigurationResponse
  # USERS ============================================
  createUser(userInput: UserInput!): UserResponse
  updateUser(
    updateUserInput: UpdateUserInput!
    deleteInput: Boolean = false
  ): UserResponse
  # CATEGORIES ==========================================
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryResponse
  updateCategory(updateCategoryInput: UpdateCategoryInput!): CategoryResponse
  deleteCategory(id: ObjectId!): CategoryResponse
  # PRODUCTS ==========================================
  createProduct(createProductInput: CreateProductInput!): ProductResponse
  updateProduct(updateProductInput: UpdateProductInput!): ProductResponse
  deleteProduct(id: ObjectId!): ProductResponse
  # WAREHOUSES =======================================
  createWarehouse(
    createWarehouseInput: CreateWarehouseInput!
  ): WarehouseResponse
  updateWarehouse(
    updateWarehouseInput: UpdateWarehouseInput!
  ): WarehouseResponse
  deleteWarehouse(id: ObjectId!): WarehouseResponse
  # STOCK =======================================
  createStock(createStockInput: CreateStockInput!): StockResponse
  creatStockMovement(
    createStockMovementInput: CreateStockMovementInput!
  ): StockResponse
  # BRANCHES ===============================
  createBranch(createBranchInput: CreateBranchInput!): BranchResponse
  updateBranch(updateBranchInput: UpdateBranchInput!): BranchResponse
  deleteBranch(id: ObjectId!): BranchResponse
  createBranchProduct(
    createBranchProductInput: CreateBranchProductInput!
  ): BranchProductResponse
  updateBranchProduct(
    updateBranchProductInput: UpdateBranchProductInput!
  ): BranchProductResponse
  deleteBranchProduct(id: ObjectId!): BranchProductResponse
  createBranchProductStockMovement(
    createBranchProductStockMovementInput: CreateBranchProductStockMovementInput!
  ): BranchProductResponse
  # CASH ==================================
  openCash(createTurnInput: CreateTurnInput!): CashResponse
  closeCash(closeTurnInput: CloseTurnInput!): CashResponse
  createCashMovement(
    createTurnMovementInput: CreateTurnMovementInput!
  ): CashTurnMovementResponse
  # SALES =================================
  createSale(createSaleInput: CreateSaleInput!): SaleResponse
  cancelSale(cancelSaleInput: CancelSaleInput!): SaleResponse
  # ORDERS =================================
  acceptOrder(orderId: ObjectId!): OrderResponse
  deliverOrder(orderId: ObjectId!): OrderResponse
  rejectOrder(orderId: ObjectId!): OrderResponse
  # DISTRIBUTOR =================================
  createDistributor(
    createDistributorInput: CreateDistributorInput!
  ): DistributorResponse
  updateDistributor(
    updateDistributorInput: UpdateDistributorInput!
  ): DistributorResponse
  # PRICELISTS ==================================
  createPriceList(
    createPriceListInput: CreatePriceListInput!
  ): PriceListResponse
  updatePriceList(
    updatePriceListInput: UpdatePriceListInput!
  ): PriceListResponse
  deletePriceList(id: ObjectId!): PriceListResponse
  # PRICELISTS ==================================
  createPrice(createPriceInput: CreatePriceInput!): PriceResponse
  updatePrice(updatePriceInput: UpdatePriceInput!): PriceResponse
  deletePrice(id: ObjectId!): PriceResponse
  # DISTRIBUTOR SALES ==========================
  createDistributorSale(
    createDistributorSaleInput: CreateDistributorSaleInput!
  ): DistributorSaleResponse
  # PAYMENTS ===================================
  createPayment(createPaymentInput: CreatePaymentInput!): PaymentResponse
  # ========================= ECOMMERCE ROUTES ============================
  publicCreateCustomer(
    createCustomerInput: CreateCustomerInput!
  ): CustomerResponse
  publicCreateAddress(createAddressInput: CreateAddressInput!): AddressResponse
  publicCreateOrder(createOrderInput: CreateOrderInput!): OrderResponse
  uploadFile(fileInput: FileInput!): ProductImageResponse
}
# TYPE ENTITIES ------------------------------------------------------------------------------------------------------------------------------------
type MeasurementUnits {
  name: String!
  shortName: String!
}
type Configuration {
  id: ObjectId!
  businessName: String!
  nit: String
  phone: String!
  email: String!
  web: String
  address: String!
  s3BucketUrl: String
  measurementUnits: [MeasurementUnits!]!
}
type Role {
  id: ObjectId!
  name: String!
  code: String!
  status: Boolean!
  type: RoleTypeEnum!
}
type User {
  id: ObjectId!
  name: String!
  lastName: String!
  email: String!
  phone: String!
  lastLogin: Date
  status: Boolean!
  createdBy: ObjectId
  roleId: ObjectId!
  # resolvers
  roleInfo: Role
}
type Category {
  id: ObjectId!
  name: String!
  code: String!
}
type Product {
  id: ObjectId!
  name: String!
  # TODO: Change to pricelist
  suggetedPrice: Float!
  code: String!
  internalCode: String
  description: String!
  categoryId: ObjectId
  cost: Float
  image: String
  warehouses: [ObjectId!]!
  # FieldsResolvers
  category: Category
}
type Warehouse {
  id: ObjectId!
  name: String!
  description: String!
  address: String!
}
type Stock {
  id: ObjectId!
  productId: ObjectId!
  warehouseId: ObjectId!
  quantity: Int!
  securityStock: Int
  lastStockEntry: Int!
  units: String!
  # Fields Resolvers
  product: Product
  warehouse: Warehouse
}
type StockHistory {
  id: ObjectId!
  stockId: ObjectId!
  warehouseId: ObjectId!
  quantity: Int!
  type: StockMovementTypeEnum!
  date: Date!
  stockBefore: Int!
  stockLater: Int!
  createdBy: ObjectId
  # Fields Resolvers
  stock: Stock
  warehouse: Warehouse
  createdByInfo: User
}
type Branch {
  id: ObjectId!
  name: String!
  code: String!
  city: String!
  direction: String!
  phone: String
  nit: String
  visibleOnWeb: Boolean!
  cashId: ObjectId!
  # Fields Resolvers
  cash: Cash
}
type BranchProduct {
  id: ObjectId!
  branchId: ObjectId!
  productId: ObjectId!
  price: Float!
  stock: Float!
  lastStockEntry: Float
  isVisibleOnWeb: Boolean!
  isVisibleOnMenu: Boolean!
  # Fields Resolvers
  product: Product
  branch: Branch
}
type Cash {
  id: ObjectId!
  branchId: ObjectId!
  amount: Float!
  currentTurnId: ObjectId
  isOpen: Boolean!
  # Fields Resolvers
  currentTurn: Turn
}
type OpenTurnInfo {
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  date: Date!
  observation: String
  openBy: ObjectId
  # Fields Resolver
  openByInfo: User
}
type CloseTurnInfo {
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  date: Date!
  observation: String
  closeBy: ObjectId
  # Fields Resolver
  closeByInfo: User
}
type Turn {
  id: ObjectId!
  cashId: ObjectId!
  isOpen: Boolean!
  amountOfMovents: Int!
  openInfo: OpenTurnInfo!
  closeInfo: CloseTurnInfo
}
type TurnMovements {
  id: ObjectId!
  turnId: ObjectId!
  cashId: ObjectId!
  amount: Float!
  date: Date!
  type: TurnMovementTypeEnum
  concept: String
  createdBy: ObjectId
  # Fields Resolvers
  createdByInfo: User
}
type SaleItem {
  branchProductId: ObjectId!
  productId: ObjectId!
  price: Float!
  qty: Int!
  total: Float!
  # Fields Resolvers
  product: Product
}
type Sale {
  id: ObjectId!
  branchId: ObjectId!
  products: [SaleItem!]!
  paymentMethod: PaymentMethodEnum!
  subTotal: Float!
  total: Float!
  discount: Float!
  date: Date!
  code: String!
  client: String
  amountRecibed: Float!
  change: Float!
  observations: String
  orderId: ObjectId
  canceled: Boolean
  reason: String
  createdBy: ObjectId
  canceledAt: Date
  canceledBy: ObjectId
  # Fields Resolvers
  branch: Branch
  createdByInfo: User
  canceledByInfo: User
}
type SalesByPaymentMethodSummary {
  method: PaymentMethodEnum
  total: Float!
}
type SalesSummary {
  paymentMethods: [SalesByPaymentMethodSummary!]!
  total: Float!
}
type Order {
  id: ObjectId!
  branchId: ObjectId!
  products: [SaleItem!]!
  deliveryMethod: DeliveryMethodEnum!
  paymentMethod: PaymentMethodEnum!
  subTotal: Float!
  total: Float!
  discount: Float!
  date: Date!
  code: String!
  customerId: ObjectId!
  addressId: ObjectId
  pickUpInformation: String
  orderDetails: String
  orderStatus: OrderStatusEnum!
  orderAcepted: Boolean
  orderAceptedAt: Date
  orderAceptedBy: ObjectId
  reason: String
  rejected: Boolean
  rejectedAt: Date
  rejectedBy: ObjectId
  isSold: Boolean!
  saleId: ObjectId
  # Fields Resolvers
  customerInfo: Customer
  addressInfo: Address
  orderAceptedByInfo: User
  rejectedByInfo: User
}
type Customer {
  id: ObjectId!
  name: String!
  lastName: String!
  email: String
  phone: String!
  lastOrderDate: Date
  addressesIds: [ObjectId!]!
  ordersIds: [ObjectId!]!
  # Fields Resolvers
  addressInfo: [Address!]
}
type Address {
  id: ObjectId!
  latitude: Float!
  longitude: Float!
  detail: String!
  customerId: ObjectId!
  # Fields Resolvers
  customerInfo: Customer
}
type DistributorOwnerInformation {
  name: String!
  lastName: String
  phone: String
  address: String
}
type Distributor {
  id: ObjectId!
  name: String!
  code: String!
  address: String!
  email: String
  phone: String!
  nit: String
  socialReason: String
  ownerInformation: DistributorOwnerInformation!
}
type Price {
  id: ObjectId!
  productId: ObjectId!
  priceListId: ObjectId!
  price: Float!
  # Field Resolvers
  product: Product
  priceList: PriceList
}
type PriceList {
  id: ObjectId!
  name: String!
  description: String
  productsIds: [ObjectId!]!
}
type DistributorSaleItem {
  productId: ObjectId!
  price: Float!
  qty: Int!
  total: Float!
  # Field resolvers
  product: Product
}
type DistributorSale {
  id: ObjectId!
  products: [DistributorSaleItem!]!
  priceListId: ObjectId!
  warehouseId: ObjectId!
  paymentMethod: DistributorSalePaymentMethod!
  subTotal: Float!
  total: Float!
  discount: Float!
  balance: Float!
  totalPaid: Float!
  date: Date!
  code: String!
  distributorId: ObjectId!
  observations: String
  createdBy: ObjectId
  canceled: Boolean
  reason: String
  canceledAt: Date
  canceledBy: ObjectId
  # Field resolvers
  warehouse: Warehouse
  priceList: PriceList
  distributor: Distributor
  createdByInfo: User
  canceledByInfo: User
}
type DistributorSaleProduct {
  warehouseId: ObjectId!
  stockId: ObjectId!
  productId: ObjectId!
  priceListId: ObjectId!
  priceId: ObjectId!
  price: Float!
  stock: Float!
  # Field resolvers
  product: Product
}
type Payment {
  id: ObjectId!
  amount: Float!
  balance: Float!
  totalPaid: Float!
  date: Date!
  observation: String
  distributorId: ObjectId!
  distributorSaleId: ObjectId!
  createdBy: ObjectId
  # Fields Resolvers
  createdByInfo: User
  distributor: Distributor
  distributorSale: DistributorSale
}
type DistributorsSalesSummary {
  total: Float!
  totalPaid: Float!
  balance: Float!
}
type BranchSales {
  id: ObjectId!
  name: String!
  total: Float!
}
type BusinessBalance {
  salesByBranch: [BranchSales!]!
  totalPaid: Float!
  balance: Float!
  result: Float!
  totalEarnings: Float!
  totalExpenses: Float!
}
type BranchProductCategorized {
  id: ObjectId!
  name: String!
  code: String!
  products: [BranchProduct!]
}
# RESPONSES -----------------------------------------------------------------------------------------------------------------------------------------
interface ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
}
type ErrorInput {
  message: String!
  field: String
}
type Response implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
}
type ConfigurationResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Configuration
}
type LoginResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  token: String
}
type RolesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Role]
}
type UsersResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [User!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type UserResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: User
}
type CategoriesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Category!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type PublicCategoriesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Category!]
}
type CategoryResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Category
}
type ProductsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Product!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type ProductResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Product
}
type WarehouseResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Warehouse
}
type WarehousesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Warehouse!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type StockResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Stock
}
type StocksResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Stock!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type StocksHistoryResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [StockHistory!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type BranchsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Branch!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type BranchResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Branch
}
type BranchProductsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [BranchProduct!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type BranchProductsCategorizedResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [BranchProductCategorized!]
}
type BranchProductResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: BranchProduct
}
type CashResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Cash
}
type CashTurnMovementsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [TurnMovements!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type CashTurnMovementResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: TurnMovements
}
type SalesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Sale!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type SaleResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Sale
}
type SalesSummaryResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: SalesSummary
}
type CustomerResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Customer
}
type AddressResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Address
}
type OrdersResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Order!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type OrderResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Order
}
type DistributorsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Distributor!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type DistributorResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Distributor
}
type PriceListsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [PriceList!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type PriceListResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: PriceList
}
type PricesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Price!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type PriceResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Price
}
type DistributorSalesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [DistributorSale!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type DistributorSaleResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: DistributorSale
}
type DistributorSaleProductsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [DistributorSaleProduct!]
}
type DistributorsSalesSummaryResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: DistributorsSalesSummary
}
type PaymentResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Payment
}
type DistributorSalePaymentsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Payment!]
}
type BusinessBalanceResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: BusinessBalance
}
type ProductImageResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: String
}
# INPUTS -----------------------------------------------------------------------------------------------------------------------------------------
input UpdateMeasurementUnitsInput {
  name: String!
  shortName: String!
}
input UpdateConfigurationInput {
  id: ObjectId!
  businessName: String
  nit: String
  phone: String
  email: String
  web: String
  address: String
  direction: String
  s3BucketUrl: String
  measurementUnits: [UpdateMeasurementUnitsInput!]
}
input LoginInput {
  email: String!
  password: String!
}
input PaginationInput {
  rows: Int
  page: Int
  filter: String
}
input UserInput {
  name: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  roleId: ObjectId!
}
input UpdateUserInput {
  id: ObjectId!
  name: String
  lastName: String
  email: String
  password: String
  phone: String
  roleId: ObjectId
  status: Boolean
}
input CreateCategoryInput {
  name: String!
}
input UpdateCategoryInput {
  id: ObjectId!
  name: String
}
input CreateProductInput {
  name: String!
  code: String!
  # TODO: Change to pricelist
  suggetedPrice: Float!
  description: String!
  categoryId: ObjectId
  cost: Float
  image: String
}
input UpdateProductInput {
  id: ObjectId!
  name: String
  code: String
  # TODO: Change to PriceList
  suggetedPrice: Float
  description: String
  categoryId: ObjectId
  cost: Float
  image: String
}
input CreateWarehouseInput {
  name: String!
  description: String!
  address: String!
}
input UpdateWarehouseInput {
  id: ObjectId!
  name: String
  description: String
  address: String
}
input WarehouseStockPaginationInput {
  rows: Int
  page: Int
  filter: String
  warehouses: [ObjectId!]!
}
input CreateStockInput {
  productId: ObjectId!
  warehouseId: ObjectId!
  quantity: Int!
  securityStock: Int
  units: String!
}
input CreateStockMovementInput {
  stockId: ObjectId!
  quantity: Int!
  type: StockMovementTypeEnum!
  detail: String
  date: Date!
}
input CreateBranchInput {
  name: String!
  code: String!
  city: String!
  direction: String!
  phone: String
  nit: String
  visibleOnWeb: Boolean!
}
input UpdateBranchInput {
  id: ObjectId!
  name: String
  code: String
  city: String
  direction: String
  phone: String
  nit: String
  visibleOnWeb: Boolean
}
input CreateBranchProductInput {
  branchId: ObjectId!
  productId: ObjectId!
  price: Float!
  isVisibleOnWeb: Boolean!
  isVisibleOnMenu: Boolean!
}
input UpdateBranchProductInput {
  id: ObjectId!
  price: Float
  isVisibleOnWeb: Boolean
  isVisibleOnMenu: Boolean
}
input CreateBranchProductStockMovementInput {
  branchId: ObjectId!
  branchProductId: ObjectId!
  type: StockMovementTypeEnum!
  qty: Float!
  # Optional on OutPuts
  stockId: ObjectId
  observation: String
  date: Date!
}
input CreateTurnInput {
  cashId: ObjectId!
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  observation: String
  updateToPhysicialAmount: Boolean!
}
input CloseTurnInput {
  cashId: ObjectId!
  turnId: ObjectId!
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  observation: String
  updateToPhysicialAmount: Boolean!
}
input CreateTurnMovementInput {
  turnId: ObjectId!
  cashId: ObjectId!
  amount: Float!
  date: Date!
  type: TurnMovementTypeEnum
  concept: String
}
input SalesPaginationInput {
  rows: Int
  page: Int
  # Filter by sale code
  filter: String
  branchIds: [ObjectId!]!
  initialDate: Date
  endDate: Date
  saleBy: ObjectId
}
input SaleItemInput {
  branchProductId: ObjectId!
  productId: ObjectId!
  price: Float!
  qty: Int!
  total: Float!
}
input CreateSaleInput {
  branchId: ObjectId!
  products: [SaleItemInput!]!
  paymentMethod: PaymentMethodEnum!
  subTotal: Float!
  total: Float!
  discount: Float!
  date: Date!
  client: String
  amountRecibed: Float!
  change: Float!
  observations: String
  # if sale comes from order send this fild
  orderId: ObjectId
}
input SalesSummaryInput {
  branchIds: [ObjectId!]!
  initialDate: Date
  endDate: Date
  saleBy: ObjectId
}
input CancelSaleInput {
  id: ObjectId!
  reason: String!
  cashBack: Boolean!
  stockReturn: Boolean!
}
input OrderPaginationInput {
  rows: Int
  page: Int
  filter: String
  orderesAcepted: Boolean
  branchId: ObjectId
  status: OrderStatusEnum
}
input CreateCustomerInput {
  name: String!
  lastName: String!
  email: String
  phone: String!
}
input CreateAddressInput {
  latitude: Float!
  longitude: Float!
  detail: String!
  customerId: ObjectId!
}
input CreateOrderInput {
  branchId: ObjectId!
  products: [SaleItemInput!]!
  deliveryMethod: DeliveryMethodEnum!
  paymentMethod: PaymentMethodEnum!
  subTotal: Float!
  total: Float!
  discount: Float!
  customerId: ObjectId!
  addressId: ObjectId
  pickUpInformation: String
  orderDetails: String
}
input CreateDistrbutorOwnerInformationInput {
  name: String!
  lastName: String
  phone: String
  address: String
}
input CreateDistributorInput {
  name: String!
  code: String!
  address: String!
  email: String
  phone: String!
  nit: String
  socialReason: String
  ownerInformation: CreateDistrbutorOwnerInformationInput!
}
input UpdateDistrbutorOwnerInformationInput {
  name: String
  lastName: String
  phone: String
  address: String
}
input UpdateDistributorInput {
  id: ObjectId!
  name: String
  code: String
  address: String
  email: String
  phone: String
  nit: String
  socialReason: String
  status: Boolean
  ownerInformation: UpdateDistrbutorOwnerInformationInput
}
input CreatePriceInput {
  productId: ObjectId!
  priceListId: ObjectId!
  price: Float!
}
input UpdatePriceInput {
  id: ObjectId!
  productId: ObjectId
  price: Float
}
input PricePaginationInput {
  rows: Int
  page: Int
  filter: String
  priceListId: ObjectId!
}
input CreatePriceListInput {
  name: String!
  description: String
}
input UpdatePriceListInput {
  id: ObjectId!
  name: String
  description: String
}
input DistributorSaleItemInput {
  productId: ObjectId!
  stockId: ObjectId!
  price: Float!
  qty: Int!
  total: Float!
}
input CreateDistributorSaleInput {
  products: [DistributorSaleItemInput!]!
  priceListId: ObjectId!
  warehouseId: ObjectId!
  paymentMethod: DistributorSalePaymentMethod!
  subTotal: Float!
  total: Float!
  discount: Float!
  balance: Float!
  totalPaid: Float!
  date: Date!
  distributorId: ObjectId!
  observations: String
}
input DistributorSalePaginationInput {
  rows: Int
  page: Int
  # Filter by sale code
  filter: String
  initialDate: Date
  endDate: Date
  saleBy: ObjectId
  distributorsIds: [ObjectId!]
}
input CreatePaymentInput {
  amount: Float!
  date: Date!
  observation: String
  distributorId: ObjectId!
  distributorSaleId: ObjectId!
  balance: Float!
  totalPaid: Float!
}
input PaymentPaginationInput {
  rows: Int
  page: Int
  filter: String
  distributorsIds: [ObjectId!]
  initialDate: Date
  endDate: Date
  saleBy: ObjectId
}
input FileInput {
  file: Upload!
  productId: ObjectId!
}
