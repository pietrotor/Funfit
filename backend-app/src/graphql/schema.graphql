scalar Date
scalar Time
scalar ObjectId
enum StatusEnum {
  OK
  ERROR
}
enum StockMovementTypeEnum {
  INWARD
  OUTWARD
  DISPOSE
}
enum TurnMovementTypeEnum {
  ADD
  WITHDRAW
  ADJUST
}
type Query {
  # CONFIGURATION ====================================
  getConfiguration: ConfigurationResponse
  # USERS ============================================
  login(loginInput: LoginInput!): LoginResponse
  currentUser: UserResponse
  getRoles(paginationInput: PaginationInput!): RolesResponse
  getUsers(paginationInput: PaginationInput!): UsersResponse
  getUserById(id: ObjectId!): UserResponse
  # PRODUCTS ==========================================
  getProducts(paginationInput: PaginationInput!): ProductsResponse
  getProductById(id: ObjectId!): ProductResponse
  getProductsOutOfWarehouse(
    paginationInput: PaginationInput!
    warehouseId: ObjectId!
  ): ProductsResponse
  # WAREHOUSES =======================================
  getWarehouses(paginationInput: PaginationInput!): WarehousesResponse
  getWarehouseById(id: ObjectId!): WarehouseResponse
  # STOCKS =======================================
  getStocksPaginated(paginationInput: PaginationInput!): StocksResponse
  getStockById(id: ObjectId!): StockResponse
  getProductStock(
    paginationInput: PaginationInput!
    productId: ObjectId!
  ): StocksResponse
  getWarehouseStock(
    warehouseStockPaginationInput: WarehouseStockPaginationInput!
  ): StocksResponse
  getStockHistory(
    paginationInput: PaginationInput!
    stockId: ObjectId!
  ): StocksHistoryResponse
  getWarehouseHistory(
    paginationInput: PaginationInput!
    warehouseId: ObjectId!
  ): StocksHistoryResponse
  # BRANCHES ===============================
  getBranchesPaginated(paginationInput: PaginationInput!): BranchsResponse
  getBranchById(id: ObjectId!): BranchResponse
  getBranchProductsPaginated(paginationInput: PaginationInput!, branchId: ObjectId!): BranchProductsResponse
  getBranchProductById(id: ObjectId!): BranchProductResponse
  # CASH ==================================
  getCashById(id: ObjectId!): CashResponse
  getCashTurnMovements(paginationInput: PaginationInput!, turnId: ObjectId!): CashTurnMovementsResponse
  # ============================ ECOMMERCE ROUTES ================================
  getPublicProducts(paginationInput: PaginationInput!): ProductsResponse
}
type Mutation {
  # CONFIGURATION ====================================
  updateConfiguration(
    updateConfigurationInput: UpdateConfigurationInput!
  ): ConfigurationResponse
  # USERS ============================================
  createUser(userInput: UserInput!): UserResponse
  updateUser(
    updateUserInput: UpdateUserInput!
    deleteInput: Boolean = false
  ): UserResponse
  # PRODUCTS ==========================================
  createProduct(createProductInput: CreateProductInput!): ProductResponse
  updateProduct(updateProductInput: UpdateProductInput!): ProductResponse
  deleteProduct(id: ObjectId!): ProductResponse
  # WAREHOUSES =======================================
  createWarehouse(
    createWarehouseInput: CreateWarehouseInput!
  ): WarehouseResponse
  updateWarehouse(
    updateWarehouseInput: UpdateWarehouseInput!
  ): WarehouseResponse
  deleteWarehouse(id: ObjectId!): WarehouseResponse
  # STOCK =======================================
  createStock(createStockInput: CreateStockInput!): StockResponse
  creatStockMovement(
    createStockMovementInput: CreateStockMovementInput!
  ): StockResponse
  # BRANCHES ===============================
  createBranch(createBranchInput: CreateBranchInput!): BranchResponse
  updateBranch(updateBranchInput: UpdateBranchInput!): BranchResponse
  deleteBranch(id: ObjectId!): BranchResponse
  createBranchProduct(createBranchProductInput: CreateBranchProductInput!): BranchProductResponse
  updateBranchProduct(updateBranchProductInput: UpdateBranchProductInput!): BranchProductResponse
  deleteBranchProduct(id: ObjectId!): BranchProductResponse
  # CASH ==================================
  openCash(createTurnInput: CreateTurnInput!): CashResponse
  closeCash(closeTurnInput: CloseTurnInput!): CashResponse
  createCashMovement(createTurnMovementInput: CreateTurnMovementInput!): CashTurnMovementResponse
}
# TYPE ENTITIES ------------------------------------------------------------------------------------------------------------------------------------
type MeasurementUnits {
  name: String!
  shortName: String!
}
type Configuration {
  id: ObjectId!
  businessName: String!
  nit: String
  phone: String!
  email: String!
  web: String
  address: String!
  s3BucketUrl: String
  measurementUnits: [MeasurementUnits!]!
}
type Role {
  id: ObjectId!
  name: String!
  code: String!
  status: Boolean!
}
type User {
  id: ObjectId!
  name: String!
  lastName: String!
  email: String!
  phone: String!
  lastLogin: Date
  status: Boolean!
  createdBy: ObjectId
  roleId: ObjectId!
  # resolvers
  roleInfo: Role
}
type Product {
  id: ObjectId!
  name: String!
  # TODO: Change to pricelist
  suggetedPrice: Float!
  code: String!
  internalCode: String!
  description: String!
  cost: Float
  image: String
  warehouses: [ObjectId!]!
}
type Warehouse {
  id: ObjectId!
  name: String!
  description: String!
  address: String!
}
type Stock {
  id: ObjectId!
  productId: ObjectId!
  warehouseId: ObjectId!
  quantity: Int!
  securityStock: Int
  lastStockEntry: Int!
  units: String!
  # Fields Resolvers
  product: Product
  warehouse: Warehouse
}
type StockHistory {
  id: ObjectId!
  stockId: ObjectId!
  warehouseId: ObjectId!
  quantity: Int!
  type: StockMovementTypeEnum!
  date: Date!
  stockBefore: Int!
  stockLater: Int!
  createdBy: ObjectId
  # Fields Resolvers
  stock: Stock
  warehouse: Warehouse
  createdByInfo: User
}
type Branch {
  id: ObjectId!
  name: String!
  code: String!
  city: String!
  direction: String!
  phone: String
  nit: String
  cashId: ObjectId!
  # Fields Resolvers
  cash: Cash
}
type BranchProduct {
  id: ObjectId!
  branchId: ObjectId!
  productId: ObjectId!
  price: Float!
  isVisibleOnWeb: Boolean!
  isVisibleOnMenu: Boolean!
  # Fields Resolvers
  product: Product
  branch: Branch
}
type Cash {
  id: ObjectId!
  branchId: ObjectId!
  amount: Float!
  currentTurnId: ObjectId
  isOpen: Boolean!
  # Fields Resolvers
  currentTurn: Turn
}
type OpenTurnInfo {
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  date: Date!
  observation: String
  openBy: ObjectId
  # Fields Resolver
  openByInfo: User
}
type CloseTurnInfo {
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  date: Date!
  observation: String
  closeBy: ObjectId
  # Fields Resolver
  closeByInfo: User
}
type Turn {
  id: ObjectId!
  cashId: ObjectId!
  isOpen: Boolean!
  openInfo: OpenTurnInfo!
  closeInfo: CloseTurnInfo
}
type TurnMovements {
  id: ObjectId!
  turnId: ObjectId!
  cashId: ObjectId!
  amount: Float!
  date: Date!
  type: TurnMovementTypeEnum
  concept: String
  createdBy: ObjectId
  # Fields Resolvers
  createdByInfo: User
}
# RESPONSES -----------------------------------------------------------------------------------------------------------------------------------------
interface ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
}
type ErrorInput {
  message: String!
  field: String
}
type Response implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
}
type ConfigurationResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Configuration
}
type LoginResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  token: String
}
type RolesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Role]
}
type UsersResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [User!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type UserResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: User
}
type ProductsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Product!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type ProductResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Product
}
type WarehouseResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Warehouse
}
type WarehousesResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Warehouse!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type StockResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Stock
}
type StocksResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Stock!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type StocksHistoryResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [StockHistory!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type BranchsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [Branch!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type BranchResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Branch
}
type BranchProductsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [BranchProduct!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type BranchProductResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: BranchProduct
}
type CashResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: Cash
}
type CashTurnMovementsResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: [TurnMovements!]
  totalRecords: Int
  totalPages: Int
  rows: Int
  currentPage: Int
}
type CashTurnMovementResponse implements ResponseBase {
  errorInput: [ErrorInput!]
  status: StatusEnum!
  message: String
  data: TurnMovements
}
# INPUTS -----------------------------------------------------------------------------------------------------------------------------------------
input UpdateMeasurementUnitsInput {
  name: String!
  shortName: String!
}
input UpdateConfigurationInput {
  id: ObjectId!
  businessName: String
  nit: String
  phone: String
  email: String
  web: String
  address: String
  direction: String
  s3BucketUrl: String
  measurementUnits: [UpdateMeasurementUnitsInput!]
}
input LoginInput {
  email: String!
  password: String!
}
input PaginationInput {
  rows: Int
  page: Int
  filter: String
}
input UserInput {
  name: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  roleId: ObjectId!
}
input UpdateUserInput {
  id: ObjectId!
  name: String
  lastName: String
  email: String
  password: String
  phone: String
  roleId: ObjectId
  status: Boolean
}
input CreateProductInput {
  name: String!
  code: String!
  # TODO: Change to pricelist
  suggetedPrice: Float!
  description: String!
  cost: Float
  image: String
}
input UpdateProductInput {
  id: ObjectId!
  name: String
  code: String
  # TODO: Change to PriceList
  suggetedPrice: Float
  description: String
  cost: Float
  image: String
}
input CreateWarehouseInput {
  name: String!
  description: String!
  address: String!
}
input UpdateWarehouseInput {
  id: ObjectId!
  name: String
  description: String
  address: String
}
input WarehouseStockPaginationInput {
  rows: Int
  page: Int
  filter: String
  warehouses: [ObjectId!]!
}
input CreateStockInput {
  productId: ObjectId!
  warehouseId: ObjectId!
  quantity: Int!
  securityStock: Int
  units: String!
}
input CreateStockMovementInput {
  stockId: ObjectId!
  quantity: Int!
  type: StockMovementTypeEnum!
  detail: String
  date: Date!
}
input CreateBranchInput {
  name: String!
  code: String!
  city: String!
  direction: String!
  phone: String
  nit: String
}
input UpdateBranchInput {
  id: ObjectId!
  name: String
  code: String
  city: String
  direction: String
  phone: String
  nit: String
}
input CreateBranchProductInput {
  branchId: ObjectId!
  productId: ObjectId!
  price: Float!
  isVisibleOnWeb: Boolean!
  isVisibleOnMenu: Boolean!
}
input UpdateBranchProductInput {
  id: ObjectId!
  price: Float
  isVisibleOnWeb: Boolean
  isVisibleOnMenu: Boolean
}
input CreateTurnInput {
  cashId: ObjectId!
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  observation: String
  updateToPhysicialAmount: Boolean!
}
input CloseTurnInput {
  cashId: ObjectId!
  turnId: ObjectId!
  amount: Float!
  physicialAmount: Float!
  difference: Float!
  observation: String
  updateToPhysicialAmount: Boolean!
}
input CreateTurnMovementInput {
  turnId: ObjectId!
  cashId: ObjectId!
  amount: Float!
  date: Date!
  type: TurnMovementTypeEnum
  concept: String
}